"""Module for providing the parts in the template.html file"""
from pathlib import Path

import markdown
from bs4 import BeautifulSoup as soup

from .helpers import (
    CHARACTERISTICS,
    FORMS,
    TECHNIQUES,
    enumerate_helper,
    repeat_template,
)
from .translations import translation_attrs, translation_attrs_setup

# Add new parts to this dictionary
# parts can be defined in other modules and imported here if the generating
# code is long
parts = {
    "translation_attrs": translation_attrs,
    "translation_attrs_setup": translation_attrs_setup,
}


parts[
    "header"
] = "<!-- This file is automatically generated from a template. Any change will be overwritten -->"

# Personality traits
parts["personality_trait_rows"] = repeat_template(
    """<tr>
    <td><input type="text" class="sheet-heading_2" style="width:245px" name="attr_Personality_Trait%%"/></td>
    <td><input type="text" class="sheet-number_1" style="width:70px;" name="attr_Personality_Trait%%_score"/></td>
    <td><button type="roll" class="sheet-button" value="&{template:generic} {{Banner=^{personality} ^{roll}}} {{Label=@{Personality_Trait%%}}} {{Result=[[1d10 + [[@{Personality_Trait%%_Score}]][@{Personality_Trait%%}] ]]}}"></button></td>
</tr>""",
    range(1, 7),
)


# Reputations
parts["reputation_rows"] = repeat_template(
    """<tr>
    <td><input type="text" class="sheet-heading_2" name="attr_Reputations%%"/></td>
    <td><input type="text" class="sheet-heading_2a" name="attr_Reputations%%_type"/></td>
    <td><input type="text" class="sheet-number_1" style="width:50px;" name="attr_Reputations%%_score"/></td>
    <td><button type="roll" class="sheet-button" value="&{template:generic} {{Banner=^{reputation} ^{roll}}} {{Label=@{Reputations%%}}} {{Result=[[1d10 + [[@{Reputations%%_Score}]][@{Reputations%%}] ]] }}"></button></td>
</tr>""",
    range(1, 7),
)


# Characteristics definitions
parts["characteristic_rows"] = repeat_template(
    """<tr>
    <th data-i18n="%(char)s" >%(Char)s</th>
    <td><input type="text" class="sheet-heading_2" name="attr_%(Char)s_Description"/></td>
    <td><input type="text" class="sheet-number_1" name="attr_%(Char)s_Score" value="0"/></td>
    <td><input type="text" class="sheet-number_1" name="attr_%(Char)s_Aging" value="0"/></td>
    <td><button type="roll" class="sheet-button" name="roll_%(Char)s" value="&{template:ability} {{name= @{character_name}}} {{label0=^{%(char)s}}} {{banner=@{%(Char)s_Description}}} {{label1=^{score}}} {{result1=@{%(Char)s_Score}}} {{label2=^{characteristic-m}}} {{label2=^{weakness-m}}} {{result2=[[[[floor(@{Fatigue})]][@{fatigue_i18n}] + @{wound_total}[@{wounds_i18n}]]]}} {{label3=^{circumstances-m}}} {{result3=[[(?{@{circumstantial_i18n}|0})]]}} {{result0=[[ 1d10 + @{%(Char)s_Score}[@{%(char)s_i18n}] + @{wound_total}[@{wounds_i18n}] + [[floor(@{Fatigue})]][@{fatigue_i18n}] + (?{@{circumstantial_i18n}|0})[@{circumstances_i18n}] ]]}}"></button></td>
</tr>""",
    CHARACTERISTICS,
    str_key="char",
)

# Characteristic options
parts["characteristic_score_options"] = repeat_template(
    """<option value="@{%(Char)s_Score}" data-i18n="%(char)s" >%(Char)s</option>""",
    CHARACTERISTICS,
    str_key="char",
)
parts["characteristic_name_options"] = repeat_template(
    """<option value="%(Char)s" data-i18n="%(char)s" >%(Char)s</option>""",
    CHARACTERISTICS,
    str_key="char",
)


# Technique options
parts["technique_score_options"] = repeat_template(
    """<option value="(@{%(Tech)s_Score} + @{%(Tech)s_Puissant})[@{%(tech)s_i18n}]" data-i18n="%(tech)s" >%(Tech)s</option>""",
    TECHNIQUES,
    str_key="tech",
)
parts["technique_score_options_unlabeled"] = repeat_template(
    """<option value="@{%(Tech)s_Score} + @{%(Tech)s_Puissant}" data-i18n="%(tech)s" >%(Tech)s</option>""",
    TECHNIQUES,
    str_key="tech",
)
parts["technique_name_options"] = repeat_template(
    """<option value="%(Tech)s" data-i18n="%(tech)s" >%(Tech)s</option>""",
    TECHNIQUES,
    str_key="tech",
)

parts["technique_enumerated_options"] = repeat_template(
    """<option value="%(index)s" data-i18n="%(tech)s" >%(Tech)s</option>""",
    enumerate_helper(TECHNIQUES, [str.capitalize], start=1),
    tuple_keys=("index", "tech", "Tech"),
)

# Form options
parts["form_score_options"] = repeat_template(
    """<option value="(@{%(Form)s_Score} + @{%(Form)s_Puissant})[@{%(form)s_i18n}]" data-i18n="%(form)s" >%(Form)s</option>""",
    FORMS,
    str_key="form",
)
parts["form_score_options_unlabeled"] = repeat_template(
    """<option value="@{%(Form)s_Score} + @{%(Form)s_Puissant}" data-i18n="%(form)s" >%(Form)s</option>""",
    FORMS,
    str_key="form",
)
parts["form_name_options"] = repeat_template(
    """<option value="%(Form)s" data-i18n="%(form)s" >%(Form)s</option>""",
    FORMS,
    str_key="form",
)

parts["form_enumerated_options"] = repeat_template(
    """<option value="%(index)s" data-i18n="%(form)s" >%(Form)s</option>""",
    enumerate_helper(FORMS, [str.capitalize], start=1),
    tuple_keys=("index", "form", "Form"),
)

# Documentation
with open(Path(__file__).parents[1] / "documentation.md") as f:
    html = markdown.markdown("\n".join(f.readlines()))
parts["documentation"] = soup(html, "html.parser").prettify()